
Image
*****

Image class
===========

This class manages images, optionally including a variance and a bad pixel mask.

.. class:: obj.Image([filename=None, ext = None, notnoise=False, shape=(101,101), wcs = None, unit=None, data=None, var=None,fscale=1.0])

  :param filename: Possible FITS filename.
  :type filename: string
  :param ext: Number/name of the data extension or numbers/names of the data and variance extensions.
  :type ext: integer or (integer,integer) or string or (string,string)
  :param notnoise: True if the noise Variance image is not read (if it exists).
  
		   Use notnoise=True to create image without variance extension.
  :type notnoise: boolean
  :param shape: Lengths of data in Y and X. Python notation is used: (ny,nx). (101,101) by default.
  :type shape: integer or (integer,integer)
  :param wcs: World coordinates.
  :type wcs: WCS
  :param unit: Possible data unit type. None by default.
  :type unit: string
  :param data: Array containing the pixel values of the image. None by default.
  :type data: float array
  :param var: Array containing the variance. None by default.
  :type var: float array
  :param fscale: Flux scaling factor (1 by default).
  :type fscale: float
  
Examples::
 
  import numpy as np
  from mpdaf.obj import Image
  from mpdaf.obj import WCS
  
  wcs1 = WCS(crval=0,cdelt=0.2)
  wcs2 = WCS(crval=0,cdelt=0.2,shape=400)
  MyData = np.ones((300,300))
  
  ima = Image(filename="image.fits",ext=1) # image from file without variance (extension number is 1)  
  ima = Image(filename="image.fits",ext=(1,2)) # image from file with variance (extension numbers are 1 and 2)
  ima = Image(shape=300, wcs=wcs1) # image 300x300 filled with zeros
  ima = Image(wcs=wcs1, data=MyData) # image 300x300 filled with MyData
  ima = Image(shape=300, wcs=wcs2) # warning: world coordinates and image have not the same dimensions
				   # ima.wcs = None
  ima = Image(wcs=wcs2, data=MyData) # warning: world coordinates and data have not the same dimensions
				       # ima.wcs = None


Attributes
----------

+---------+-----------------------+-------------------------------------------------------+
|filename | string                | Possible FITS filename.                               |
+---------+-----------------------+-------------------------------------------------------+
| unit    | string                | Possible data unit type.                              |
+---------+-----------------------+-------------------------------------------------------+
| cards   | pyfits.CardList       | Possible FITS header instance.                        |
+---------+-----------------------+-------------------------------------------------------+
| data    | masked array          | Pixel values and masked pixel of the image.           |
+---------+-----------------------+-------------------------------------------------------+
| shape   | array of 2 integers   | Lengths of data in Y and X (python notation: (ny,nx)) |
+---------+-----------------------+-------------------------------------------------------+
| var     | array                 | Array containing the variance.                        |
+---------+-----------------------+-------------------------------------------------------+
| fscale  | float                 | Flux scaling factor (1 by default).                   |
+---------+-----------------------+-------------------------------------------------------+
| wcs     | WCS                   | World coordinates.                                    |
+---------+-----------------------+-------------------------------------------------------+


Indexing
--------

``Image[i,j]`` returns the corresponding value.

``Image[i1:i2,j1:j2]`` returns the sub-image.

``Image[i,j] = value`` sets value in Image.data[i,j]

``Image[i1:i2,j1:j2] = array`` sets the corresponding part of Image.data.


Methods
-------

.. currentmodule:: obj.Image

.. function:: copy()

  Copies Image object in a new one and returns it.
  
  :rtype: Image object
 

.. function:: info()

  Prints information
  
 
.. function:: write(filename)

  Saves the object in a FITS file.
  
  :param filename: the FITS filename
  :type filename: string
 
 
.. function:: __le__ (x)

  Masks data array where greater than a given value (operator <=).
  
  :param x: minimum value.
  :type x: float
  :rtype: Image object.


.. function:: __lt__ (x)

  Masks data array where greater or equal than a given value (operator <).
  
  :param x: minimum value.
  :type x: float
  :rtype: Image object.


.. function:: __ge__ (x)

  Masks data array where less than a given value (operator >=).
  
  :param x: maximum value.
  :type x: float
  :rtype: Image object.


.. function:: __gt__ (x)

  Masks data array where less or equal than a given value (operator >).
  
  :param x: maximum value.
  :type x: float
  :rtype: Image object.


.. function:: resize()

  Resizes the image to have a minimum number of masked values.
  
  :rtype: Image object.


.. function:: __add__(x)

  Operator +.
  
  :param x: x is Image : 
			Dimensions and world coordinates must be the same.
  
	    x is Cube : 
			The last two dimensions of the cube must be equal to the image dimensions.
			World coordinates in spatial directions must be the same.
  :type x: number or Image or Cube object.
  :rtype: Image or Cube object.
  
	  image1 + number = image2 (image2[j,i] = image1[j,i] + number)
	  
	  image1 + image2 = image3 (image3[j,i] = image1[j,i] + image2[j,i])
	  
	  image + cube1 = cube2 (cube2[k,j,i] = cube1[k,j,i] + image[j,i])


.. function:: __sub__(x)

  Operator -.
  
  :param x: x is Image : 
			Dimensions and world coordinates must be the same.
  
	    x is Cube : 
			The last two dimensions of the cube must be equal to the image dimensions.
			World coordinates in spatial directions must be the same.
  :type x: number or Image or Cube object.
  :rtype: Image or Cube object.
	  
	  image1 - number = image2 (image2[j,i] = image1[j,i] - number)
	  
	  image1 - image2 = image3 (image3[j,i] = image1[j,i] - image2[j,i])

	  image - cube1 = cube2 (cube2[k,j,i] = image[j,i] - cube1[k,j,i])


.. function:: __mul__(x)

  Operator \*.
  
  :param x: x is Image : 
			Dimensions and world coordinates must be the same.
  
	    x is Cube : 
			The last two dimensions of the cube must be equal to the image dimensions.
			World coordinates in spatial directions must be the same.
  :type x: number or Spectrum or Image or Cube object.
  :rtype: Spectrum or Image or Cube object.
  
	  image1 \* number = image2 (image2[j,i] = image1[j,i] \* number)

	  image1 \* image2 = image3 (image3[j,i] = image1[j,i] \* image2[j,i])

	  image \* cube1 = cube2 (cube2[k,j,i] = image[j,i] \* cube1[k,j,i])

	  image \* spectrum = cube (cube[k,j,i] = image[j,i] \* spectrum[k]


.. function:: __div__(x)

  Operator /.
  
  :param x: x is Image : 
			Dimensions and world coordinates must be the same.
  
	    x is Cube : 
			The last two dimensions of the cube must be equal to the image dimensions.
			World coordinates in spatial directions must be the same.
  :type x: number or Image or Cube object.
  :rtype: Image or Cube object.
  
	  image1 / number = image2 (image2[j,i] = image1[j,i] / number)

	  image1 / image2 = image3 (image3[j,i] = image1[j,i] / image2[j,i])

	  image / cube1 = cube2 (cube2[k,j,i] = image[j,i] / cube1[k,j,i])


.. function:: __pow__(x)

  Computes the power exponent of data extensions (operator \*\*).
  
  :param x:
  :type x: number
  :rtype: Image object.


.. function:: sqrt()

  Computes the positive square-root of data extension.
  
  :rtype: Image object.


.. function:: abs()

  Computes the absolute value of data extension.
  
  :rtype: Image object.
  
.. function:: set_wcs(wcs)

  Sets the world coordinates.
  
  :param wcs: World coordinates.
  :type wcs: WCS
  
.. function:: set_var([var=None])

  Sets the variance array.
  
  :param var: Input variance array. If None, variance is set with zeros.
  :type var: float array
  
.. function:: mask(center, radius [, pix=False, inside=False])

  Masks values inside/outside the described region.
  
  :param center: Center of the explored region.
  
		If pix is False, center = (dec, ra) is in degrees.
		
		If pix is True, center = (i,j) is in pixels.
  :type center: (float,float)
  :param radius: Radius defined the explored region.
  
		If radius is float, it defined a circular region.
		
		If radius is (float,float), it defined a rectangular region.
		
		If pix is False, radius = (ddec/2, dra/2) is in arcsecs.
		
		If pix is True, radius = (di,dj) is in pixels.
  :type radius: float or (float,float)       
  :param pix: If pix is False, center and radius are in degrees and arcsecs.
  
	      If pix is True, center and radius are in pixels.
  :type pix: boolean
  :param inside: If inside is True, pixels inside the described region are masked.
  
		 If inside is False, pixels outside the described region are masked.
  :type inside: boolean
  
.. function:: get_step()

  Returns the image steps [dDec, dRa].
  
  :rtype: float array
  
.. function:: get_range()

  Returns [ [dec_min,ra_min], [dec_max,ra_max] ]
  
  :rtype: float array
  
.. function:: get_start()

  Returns [dec,ra] corresponding to pixel (0,0).
  
  :rtype: float array
  
.. function:: get_end()

  Returns [dec,ra] corresponding to pixel (-1,-1).
  
  :rtype: float array
  
.. function:: get_rot()
  
   Returns the angle of rotation.
   
   :rtype: float
  
.. function:: sum([axis=None])

  Returns the sum over the given axis.
  
  :param axis: axis = None returns a float, axis=0 or 1 returns a line or a column, other cases return None.
  :type axis: None, 0 or 1
  :rtype: float or Image
  
.. function:: norm([type='flux', value=1.0])

  Normalizes total flux to value (default 1).
  
  :param type: If 'flux',the flux is normalized and the pixel area is taken into account.
  
	      If 'sum', the flux is normalized to the sum of flux independantly of pixel size.
	      
	      If 'max', the flux is normalized so that the maximum of intensity will be 'value'.  
  :type type: 'flux' | 'sum' | 'max'
  :param value: Normalized value (default 1).   
  :type value: float
  :rtype: Image
  
.. function:: peak([center=None, radius=0, pix = False, dpix=2, plot=False])

  Finds image peak location.
  
  :param center: Center of the explored region.
  
		If pix is False, center = (dec, ra) is in degrees.
		
		If pix is True, center = (i,j) is in pixels.
		
		If center is None, the full image is explored.
  :type center: (float,float)
  :param radius: Radius defined the explored region.
        
		If pix is False, radius = (ddec/2, dra/2) is in arcsecs.
        
		If pix is True, radius = (di,dj) is in pixels.
  :type radius: float or (float,float)
  :param pix: If pix is False, center and radius are in degrees and arcsecs.
  
	      If pix is True, center and radius are in pixels.
  :type pix: boolean
  :param dpix: Half size of the window to compute the center of gravity.
  :type dpix: integer
  :param plot: If True, the peak center is overplotted on the image.
  :type plot: boolean
  :rtype: Returns a dictionary {'dec', 'ra', 'i', 'j', 'data'} containing the peak position and the peak intensity.
  
.. function:: fwhm([center=None, radius=0, pix = False])

  Computes the fwhm center. 
  
  :param center: Center of the explored region.
  
		If pix is False, center = (dec, ra) is in degrees.
		
		If pix is True, center = (i,j) is in pixels.
		
		If center is None, the full image is explored.
  :type center: (float,float)
  :param radius: Radius defined the explored region.
        
		If pix is False, radius = (ddec/2, dra/2) is in arcsecs.
        
		If pix is True, radius = (di,dj) is in pixels.
  :type radius: float or (float,float)
  :param pix: If pix is False, center and radius are in degrees and arcsecs.
  
	      If pix is True, center and radius are in pixels.
  :type pix: boolean
  :rtype: Returns [fwhm_dec,fwhm_ra].
  
.. function:: ee([center=None, radius=0, pix = False, frac = False])

  Computes ensquared energy.
        
  :param center: Center of the explored region.
  
		If pix is False, center = (dec, ra) is in degrees.
		
		If pix is True, center = (i,j) is in pixels.
		
		If center is None, the full image is explored.
  :type center: (float,float)
  :param radius: Radius defined the explored region.
  
		If radius is float, it defined a circular region.
		
		If radius is (float,float), it defined a rectangular region.
		
		If pix is False, radius = (ddec/2, dra/2) is in arcsecs.
		
		If pix is True, radius = (di,dj) is in pixels.
  :type radius: float or (float,float)
        
  :param pix: If pix is False, center and radius are in degrees and arcsecs.
  
	      If pix is True, center and radius are in pixels.
  :type pix: boolean
        
  :param frac: If frac is True, result is given relative to the total energy.
  :type frac: boolean
  :rtype: float
  
.. function:: ee_curve([center=None, pix = False, etot = None])

  Returns Spectrum object containing enclosed energy as function of radius.
  
  :param center: Center of the explored region.
  
		If pix is False, center = (dec, ra) is in degrees.
		
		If pix is True, center = (i,j) is in pixels.
		
		If center is None, center of the image is used.
  :type center: (float,float)  
  :param pix: If pix is False, center is in degrees.
  
	      If pix is True, center is in pixels.
  :type pix: boolean
  :param etot: Total energy. If etot is not set it is computed from the full image.
  :type etot: float
  :rtype: obj.Spectrum
  
.. function:: ee_size([center=None, pix = False, ee = None, frac = 0.90])

  Computes the size of the square center on (dec,ra) containing the fraction of the energy.
  
  :param center: Center of the explored region.
  
		If pix is False, center = (dec, ra) is in degrees.
		
		If pix is True, center = (i,j) is in pixels.
		
		If center is None, center of the image is used.
  :type center: (float,float)  
  :param pix: If pix is False, center is in degrees.
  
	      If pix is True, center is in pixels.
  :type pix: boolean
  :param ee: Enclosed energy. If ee is not set it is computed from the full image that contain the fraction (frac) of the total energy.
  :type ee: float
  :param frac: Fraction of energy.
  :type frac: float in ]0,1]
  :rtype: (float,float)
  
.. function:: add(other)

  Adds the image other to the current image. The coordinate are taken into account.
  
  :param other: Second image to add.
  :type other: Image
  :rtype: Image
  
.. function:: segment([shape=(2,2), minsize=20, background = 20])

  Segments the image in a number of smaller images. Returns a list of images.
  
  :param shape: Shape used for connectivity.
  :type shape: (integer,integer)
  :param minsize: Minimmum size of the images.
  :type minsize: integer
  :param background: Under this value, flux is considered as background.
  :type background: float
  :rtype: List of Image objects.
        
.. function:: moments()

  Returns [width_dec, width_ra] first moments of the 2D gaussian.
  
  :rtype: float array
  
.. function:: gauss_fit(pos_min, pos_max [, center=None, flux=None, width=None, cont=None, rot = 0, peak=False, factor = 1, plot=False])

  Performs polynomial fit on image.
  
  :param pos_min: Minimum declination and right ascension in degrees (dec_min, ra_min).
  :type pos_min: (float,float)
  :param pos_max: Maximum declination and right ascension in degrees (dec_max, ra_max)
  :type pos_max: (float,float)
  :param center: Initial gaussian center (dec_peak, ra_peak). If None it is estimated.
  :type center: (float,float)
  :param flux: Initial integrated gaussian flux or gaussian peak value if peak is True. If None, peak value is estimated.
  :type flux: float
  :param width: Initial spreads of the Gaussian blob (dec_width, ra_width). If None, they are estimated.
  :type width: (float,float)
  :param cont: Initial continuum value, if None it is estimated.
  :type cont: float
  :param rot: Initial rotation in degree.
  :type rot: float
  :param peak: If true, flux contains a gaussian peak value. 
  :type peak: boolean
  :param factor: If factor<=1, gaussian value is computed in the center of each pixel.
		
		  If factor>1, for each pixel, gaussian value is the sum of the gaussian values on the factor*factor pixels divided by the pixel area.
  :type factor: integer
  :param plot: If True, the gaussian is plotted.
  :type plot: boolean
  :rtype: objs.Gauss2D object (`Gauss2D class`_) 
  
.. function:: add_gaussian_noise(sigma)

  Adds Gaussian noise to image.
  
  :param sigma: Standard deviation.
  :type sigma: float
  :rtype: obj.Image
  
.. function:: add_poisson_noise()

  Adds Poisson noise to image.
  
  :rtype: obj.Image
  
.. function:: inside(coord)

  Returns True if coord is inside image.
  
  :param coord: declination and right ascension in degrees (dec, ra).
  :type coord: (float,float)
  :rtype: boolean
  
.. function:: fftconvolve(other)

  Convolves image with other using fft.
  
  :param other: Second Image or 2d-array.
  :type other: 2d-array or Image
  :rtype: obj.Image
  
.. function:: fftconvolve_gauss([center=None, flux=1., width=(1.,1.), peak=False, rot = 0., factor=1])

  Convolves image with a 2D gaussian.
  
  :param center: Gaussian center (dec_peak, ra_peak). If None the center of the image is used.
  :type center: (float,float)
  :param flux: Integrated gaussian flux or gaussian peak value if peak is True.
  :type flux: float
  :param width: Spreads of the Gaussian blob (dec_width,ra_width).
  :type width: (float,float)
  :param peak: If true, flux contains a gaussian peak value.
  :type peak: boolean
  :param rot: Angle position in degree.
  :type rot: float
  :param factor: If factor<=1, gaussian value is computed in the center of each pixel.
		
		  If factor>1, for each pixel, gaussian value is the sum of the gaussian values on the factor*factor pixels divided by the pixel area.
  :type factor: integer
  :rtype: obj.Image
  
.. function:: fftconvolve_moffat([center=None, I=1., a=1.0, q=1.0, n=2, rot = 0., factor=1])

  Convolves image with a 2D moffat.
  
  :param center: Gaussian center (dec_peak, ra_peak). If None the center of the image is used.
  :type center: (float,float)
  :param I: Intensity at image center. 1 by default.
  :type I: float
  :param a: Half width at half maximum of the image in the absence of atmospheric scattering. 1 by default.
  :type a: float
  :param q: Axis ratio, 1 by default.
  :type q: float
  :param n: Atmospheric scattering coefficient. 2 by default.
  :type n: integer
  :param rot: Angle position in degree.
  :type rot: float
  :param factor: If factor<=1, moffat value is computed in the center of each pixel.
  
		If factor>1, for each pixel, moffat value is the sum of the moffat values on the factor*factor pixels divided by the pixel area.
  :type factor: integer
  :rtype: obj.Image
  
  
Transformation
--------------

.. function:: truncate(dec_min, dec_max, ra_min, ra_max [, mask=True])

  Returns the corresponding sub-image.
  
  :param dec_min: Minimum declination in degrees.
  :type dec_min: float
  :param dec_max: Maximum declination in degrees.
  :type dec_max: float
  :param ra_min: Minimum right ascension in degrees.
  :type ra_min: float
  :param ra_max: Maximum right ascension in degrees.
  :type ra_max: float
  :param mask: if True, pixels outside [dec_min,dec_max] and [ra_min,ra_max] are masked.
  :type mask: boolean
  :rtype: Image
  
.. function:: rotate_wcs(theta)

  Rotates WCS coordinates to new orientation given by theta.
  
  :param theta: Rotation in degree.
  :type theta: float
  :rtype: Image
  
.. function:: rotate(theta)

  Rotates the image using spline interpolation.
  
  :param theta: Rotation in degree.
  :type theta: float
  :rtype: Image
  
.. function:: rebin_factor(factor [, margin='center'])

  Shrinks the size of the image by factor.
  
  :param factor: Factor in X and Y. Python notation: (ny,nx).
  :type factor: integer or (integer,integer)
  :param margin: This parameters is used if new size is not an integer multiple of the original size. 
  
		In 'center' case, pixels will be added on the left and on the right, on the bottom and of the top of the image. 
		
		In 'origin'case, pixels will be added on (n+1) line/column.
  :type margin: 'center' or 'origin'
  :rtype: Image
        
.. function:: rebin(newdim, newstart, newstep [, flux=False, order=3])

  Rebins the image to a new coordinate system.
  
  :param newdim: New dimensions. Python notation: (ny,nx)
  :type newdim: integer or (integer,integer)
  :param newstart: New positions (dec,ra) for the pixel (0,0). If None, old position is used.
  :type newstart: float or (float, float)
  :param newstep: New step (ddec,dra).
  :type newstep: float or (float, float)
  :param flux: if flux is True, the flux is conserved.
  :type flux: boolean
  :param order: The order of the spline interpolation, default is 3. The order has to be in the range 0-5.
  :type order: integer
  :rtype: Image
  
  
Filter
------
  
.. function:: gaussian_filter([sigma=3])

  Applies gaussian filter to the image.
        
  :param sigma: Standard deviation for Gaussian kernel
  :type sigma: float
  :rtype: Image        
            
.. function:: median_filter([size=3])

  Applies median filter to the image.
        
  :param size: Shape that is taken from the input array, at every element position, to define the input to the filter function. Default is 3.
  :type size: float
  :rtype: Image          
    
.. function:: maximum_filter([size=3])
  
  Applies maximum filter to the image.
        
  :param size: Shape that is taken from the input array, at every element position, to define the input to the filter function. Default is 3.
  :type size: float
  :rtype: Image       
    
.. function:: minimum_filter([size=3])

  Applies minimum filter to the image.
        
  :param size: Shape that is taken from the input array, at every element position, to define the input to the filter function. Default is 3.
  :type size: float
  :rtype: Image       

Plotting
--------
 
.. function:: plot([title=None])

  Plots the image.
  
  :param title: Figure title (None by default).
  :type title: string
  
  
.. function:: ipos([filename='None'])

  Prints cursor position in interactive mode (i and j define the nearest pixel, ra and dec are the position, data contains the image data value (data[i,j]) ).
  
  To read cursor position, click on the left mouse button.
  
  To remove a cursor position, click on the left mouse button + <d>
  
  To quit the interactive mode, click on the right mouse button. 
  
  At the end, clicks are saved in self.clicks as dictionary {'dec','ra','i','j','data'}.
  
  
  :param filename: If filename is not None, the cursor values are saved as a fits table with columns labeled 'I'|'J'|'RA'|'DEC'|'DATA'.
  :type filename: string
  

.. function:: idist()

  Gets distance and center from 2 cursor positions (interactive mode).
  
  To quit the interactive mode, click on the right mouse button.
  
.. function:: istat()

  Computes image statistics from windows defined with left mouse button (mean is the mean value, median the median value, std is the rms standard deviation, sum the sum, peak the peak value, npts is the total number of points).
  
  To quit the interactive mode, click on the right mouse button.
  
.. function:: ipeak()

  Finds peak location in windows defined with left mouse button.
  
  To quit the interactive mode, click on the right mouse button.
  
.. function:: ifwhm()

  Computes fwhm in windows defined with left mouse button.
  
  To quit the interactive mode, click on the right mouse button.
  
.. function:: iee()

  Computes enclosed energy in windows defined with left mouse button.
  
  To quit the interactive mode, click on the right mouse button.
  
.. function:: imask()

  Over-plots masked values (interactive mode).
  

Functions to create a new image
===============================

.. currentmodule:: obj

.. function:: gauss_image([shape=(101,101), wcs=WCS(), center=None, flux=1., width=(1.,1.), peak=False, rot = 0., factor=1])

  Creates a new image from a 2D gaussian.
  
  :param shape: Lengths of the image in Y and X with python notation: (ny,nx). (101,101) by default.
  
		If wcs object contains dimensions, shape is ignored and wcs dimensions are used.
  :type shape: integer or (integer,integer)
  :param wcs: World coordinates.
  :type wcs: WCS
  :param center: Gaussian center (dec_peak, ra_peak). If None the center of the image is used.
  :type center: (float,float)
  :param flux: Integrated gaussian flux or gaussian peak value if peak is True.
  :type flux: float
  :param width: Spreads of the Gaussian blob (dec_width,ra_width).
  :type width: (float,float)
  :param peak: If true, flux contains a gaussian peak value.
  :type peak: boolean
  :param rot: Angle position in degree.
  :type rot: float
  :param factor: If factor<=1, gaussian value is computed in the center of each pixel.
		
		  If factor>1, for each pixel, gaussian value is the sum of the gaussian values on the factor*factor pixels divided by the pixel area.
  :type factor: integer
  :rtype: obj.Image object (`Image class`_) 
  
Examples::
 
  import numpy as np
  from mpdaf.obj import gauss_image
  from mpdaf.obj import WCS
  wcs = WCS (cdelt=(0.2,0.3), crval=(8.5,12),shape=(40,30))
  ima = gauss_image(wcs=wcs,width=(1,2),factor=2, rot = 60)
  ima.plot()
  gauss = ima.gauss_fit(pos_min=(4, 7), pos_max=(13,17), cont=0, plot=True)
  gauss.print_param()
  
.. function:: moffat_image([shape=(101,101), wcs=WCS(), center=None, I=1., a=1.0, q=1.0, n=2, rot = 0., factor=1])

  Creates a new image from a 2D Moffat function.
  
  :param shape: Lengths of the image in Y and X with python notation: (ny,nx). (101,101) by default.
  
		If wcs object contains dimensions, shape is ignored and wcs dimensions are used.
  :type shape: integer or (integer,integer)
  :param wcs: World coordinates.
  :type wcs: WCS
  :param center: Gaussian center (dec_peak, ra_peak). If None the center of the image is used.
  :type center: (float,float)
  :param I: Intensity at image center. 1 by default.
  :type I: float
  :param a: Half width at half maximum of the image in the absence of atmospheric scattering. 1 by default.
  :type a: float
  :param q: Axis ratio, 1 by default.
  :type q: float
  :param n: Atmospheric scattering coefficient. 2 by default.
  :type n: integer
  :param rot: Angle position in degree.
  :type rot: float
  :param factor: If factor<=1, moffat value is computed in the center of each pixel.
  
		If factor>1, for each pixel, moffat value is the sum of the moffat values on the factor*factor pixels divided by the pixel area.
  :type factor: integer
  :rtype: obj.Image object (`Image class`_) 
  

.. function:: make_image(x, y, z, steps [, deg=True, limits=None, spline=False, order=3, smooth=0])

  Interpolates z(x,y) and returns an image.
  
  :param x: Coordinate array corresponding to the declinaison.
  :type x: float array
  :param y: Coordinate array corresponding to the right ascension.
  :type y: float array
  :param z: Input data.
  :type z: float array
  :param steps: Steps of the output image (dDec,dRa).
  :type steps: (float,float)
  :param deg: If True, world coordinates are in decimal degrees (CTYPE1='RA---TAN',CTYPE2='DEC--TAN',CUNIT1=CUNIT2='deg')
  
	      If False (by default), world coordinates are linear (CTYPE1=CTYPE2='LINEAR')
  :type deg: boolean
  :param limits: Limits of the image (dec_min,ra_min,dec_max,ra_max).
		
		 If None, minum and maximum values of x,y arrays are used.
  :type limits: (float,float,float,float)
  :param spline: False: bilinear interpolation, True: spline interpolation 
  :type spline: boolean
  :param order: Polynomial order for spline interpolation (default 3)
  :type order: integer
  :param smooth: Smoothing parameter for spline interpolation (default 0: no smoothing)
  :type smooth: float
  :rtype: obj.Image object (`Image class`_) 
  
.. function:: composite_image(ImaColList [, mode='lin', cuts=(10,90), bar=False])

  Builds composite image from a list of image and colors.
  
  :param ImaColList: List of images and colors [(Image, hue, saturation)] 
  :type ImaColList: list of tuple (Image,float,float)
  :param mode: Intensity mode. Use 'lin' for linear and 'sqrt' for root square.
  :type mode: 'lin' or 'sqrt'
  :param cuts: Minimum and maximum in percent.
  :type cuts: (float,float)
  :param bar: If bar is True a color bar image is created.
  :type bar: boolean
  :rtype: Returns a PIL RGB image (or 2 PIL images if bar is True).
  
Examples::
 
  import numpy as np
  from mpdaf.obj import Image
  from mpdaf.obj import composite_image
  
  stars = Image(filename="stars.fits")
  lowz = Image(filename="lowz.fits")
  highz = Image(filename="highz.fits")
  imalist = [stars, lowz, highz]
  tab = zip(imalist,linspace(250,0,3),ones(3)*100)
  p1 = composite_image(tab,cuts=(0,99.5),mode='sqrt')
  p1.show()
  p1.save('test_composite.jpg')
  
Gauss2D class
=============

This class stores 2D gaussian parameters.


Attributes
----------

+------------+---------------+----------------------------------------------------+
| center     | (float,float) | Gaussian center (dec,ra).                          |
+------------+---------------+----------------------------------------------------+    
| flux       | float         | Gaussian integrated flux.                          |
+------------+---------------+----------------------------------------------------+
| width      | (float,float) | Spreads of the Gaussian blob (dec_width,ra_width). |
+------------+---------------+----------------------------------------------------+    
| cont       | float         | Continuum value.                                   |
+------------+---------------+----------------------------------------------------+    
| rot        | float         | Rotation in degrees.                               |
+------------+---------------+----------------------------------------------------+    
| peak       | float         | Gaussian peak value.                               |
+------------+---------------+----------------------------------------------------+    
| err_center | (float,float) | Estimated error on Gaussian center.                |
+------------+---------------+----------------------------------------------------+        
| err_flux   | float         | Estimated error on Gaussian integrated flux.       |
+------------+---------------+----------------------------------------------------+    
| err_width  | (float,float) | Estimated error on Gaussian width.                 |
+------------+---------------+----------------------------------------------------+    
| err_rot    | float         | Estimated error on rotation.                       |
+------------+---------------+----------------------------------------------------+   
| err_peak   | float         | Estimated error on Gaussian peak value.            | 
+------------+---------------+----------------------------------------------------+


Methods
-------

.. currentmodule:: obj.Gauss2D

.. function:: copy()

  Copies Gauss2D object in a new one and returns it.
  
  :rtype: Gauss2D object
  
.. function:: print_param()

  Prints Gaussian parameters.
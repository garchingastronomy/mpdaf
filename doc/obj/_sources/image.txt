
Image
*****

Image class
===========

This class manages images, optionally including a variance and a bad pixel mask.

.. class:: obj.Image([filename=None, ext = None, getnoise=False, shape=(101,101), wcs = None, unit=None, data=None, var=None,fscale=1.0,empty=False])

  :param filename: Possible FITS filename.
  :type filename: string
  :param ext: Number of the data extension or numbers of the data and variance extensions.
  :type ext: integer or (integer,integer)
  :param getnoise: True if the noise Variance image is read (if it exists). Use getnoise=False to create image without variance extension.
  :type getnoise: boolean
  :param shape: Lengths of data in Y and X. Python notation is used: (ny,nx). (101,101) by default.
  :type shape: integer or (integer,integer)
  :param wcs: World coordinates.
  :type wcs: WCS
  :param unit: Possible data unit type. None by default.
  :type unit: string
  :param data: Array containing the pixel values of the image. None by default.
  :type data: float array
  :param var: Array containing the variance. None by default.
  :type var: float array
  :param fscale: Flux scaling factor (1 by default).
  :type fscale: float
  :param empty: If empty is True, the data and variance array are set to None.
  :type empty: boolean
  
Examples::
 
  import numpy as np
  from mpdaf.obj import Image
  from mpdaf.obj import WCS
  
  wcs1 = WCS(crval=0,cdelt=0.2)
  wcs2 = WCS(crval=0,cdelt=0.2,shape=400)
  MyData = np.ones((300,300))
  
  ima = Image(filename="image.fits",ext=1,getnoise=False) # image from file (extension number is 1)  
  ima = Image(shape=300, wcs=wcs1) # image 300x300 filled with zeros
  ima = Image(wcs=wcs1, data=MyData) # image 300x300 filled with MyData
  ima = Image(shape=300, wcs=wcs2) # warning: world coordinates and image have not the same dimensions
				   # ima.wcs = None
  ima = Image(wcs=wcs2, data=MyData) # warning: world coordinates and data have not the same dimensions
				       # ima.wcs = None


Attributes
----------

+---------+-----------------------+-------------------------------------------------------+
|filename | string                | Possible FITS filename.                               |
+---------+-----------------------+-------------------------------------------------------+
| unit    | string                | Possible data unit type.                              |
+---------+-----------------------+-------------------------------------------------------+
| cards   | pyfits.CardList       | Possible FITS header instance.                        |
+---------+-----------------------+-------------------------------------------------------+
| data    | masked array          | Pixel values and masked pixel of the image.           |
+---------+-----------------------+-------------------------------------------------------+
| shape   | array of 2 integers   | Lengths of data in Y and X (python notation: (ny,nx)) |
+---------+-----------------------+-------------------------------------------------------+
| var     | array                 | Array containing the variance.                        |
+---------+-----------------------+-------------------------------------------------------+
| fscale  | float                 | Flux scaling factor (1 by default).                   |
+---------+-----------------------+-------------------------------------------------------+
| wcs     | WCS                   | World coordinates.                                    |
+---------+-----------------------+-------------------------------------------------------+


Indexing
--------

``Image[i,j]`` returns the corresponding value.

``Image[i1:i2,j1:j2]`` returns the sub-image.

``Image[i,j] = value`` sets value in Image.data[i,j]

``Image[i1:i2,j1:j2] = array`` sets the corresponding part of Image.data.


Methods
-------

.. currentmodule:: obj.Image

.. function:: copy()

  Copies Image object in a new one and returns it.
  
  :rtype: Image object
 

.. function:: info()

  Prints information
  
 
.. function:: write(filename)

  Saves the object in a FITS file.
  
  :param filename: the FITS filename
  :type filename: string
 
 
.. function:: __le__ (x)

  Masks data array where greater than a given value.
  
  :param x: minimum value.
  :type x: float
  :rtype: Image object containing a masked array.


.. function:: __lt__ (x)

  Masks data array where greater or equal than a given value.
  
  :param x: minimum value.
  :type x: float
  :rtype: Image object containing a masked array.


.. function:: __ge__ (x)

  Masks data array where less than a given value.
  
  :param x: maximum value.
  :type x: float
  :rtype: Image object containing a masked array.


.. function:: __gt__ (x)

  Masks data array where less or equal than a given value.
  
  :param x: maximum value.
  :type x: float
  :rtype: Image object containing a masked array.


.. function:: resize()

  Resizes the image to have a minimum number of masked values.


.. function:: __add__(x)

  Operator +.
  
  :param x: x is Image : 
			Dimensions and world coordinates must be the same.
  
	    x is Cube : 
			The last two dimensions of the cube must be equal to the image dimensions.
			World coordinates in spatial directions must be the same.
  :type x: number or Image or Cube object.
  :rtype: Image or Cube object.
  
	  image1 + number = image2 (image2[j,i] = image1[j,i] + number)
	  
	  image1 + image2 = image3 (image3[j,i] = image1[j,i] + image2[j,i])
	  
	  image + cube1 = cube2 (cube2[k,j,i] = cube1[k,j,i] + image[j,i])


.. function:: __sub__(x)

  Operator -.
  
  :param x: x is Image : 
			Dimensions and world coordinates must be the same.
  
	    x is Cube : 
			The last two dimensions of the cube must be equal to the image dimensions.
			World coordinates in spatial directions must be the same.
  :type x: number or Image or Cube object.
  :rtype: Image or Cube object.
	  
	  image1 - number = image2 (image2[j,i] = image1[j,i] - number)
	  
	  image1 - image2 = image3 (image3[j,i] = image1[j,i] - image2[j,i])

	  image - cube1 = cube2 (cube2[k,j,i] = image[j,i] - cube1[k,j,i])


.. function:: __mul__(x)

  Operator \*.
  
  :param x: x is Image : 
			Dimensions and world coordinates must be the same.
  
	    x is Cube : 
			The last two dimensions of the cube must be equal to the image dimensions.
			World coordinates in spatial directions must be the same.
  :type x: number or Spectrum or Image or Cube object.
  :rtype: Spectrum or Image or Cube object.
  
	  image1 \* number = image2 (image2[j,i] = image1[j,i] \* number)

	  image1 \* image2 = image3 (image3[j,i] = image1[j,i] \* image2[j,i])

	  image \* cube1 = cube2 (cube2[k,j,i] = image[j,i] \* cube1[k,j,i])

	  image \* spectrum = cube (cube[k,j,i] = image[j,i] \* spectrum[k]


.. function:: __div__(x)

  Operator /.
  
  :param x: x is Image : 
			Dimensions and world coordinates must be the same.
  
	    x is Cube : 
			The last two dimensions of the cube must be equal to the image dimensions.
			World coordinates in spatial directions must be the same.
  :type x: number or Image or Cube object.
  :rtype: Image or Cube object.
  
	  image1 / number = image2 (image2[j,i] = image1[j,i] / number)

	  image1 / image2 = image3 (image3[j,i] = image1[j,i] / image2[j,i])

	  image / cube1 = cube2 (cube2[k,j,i] = image[j,i] / cube1[k,j,i])


.. function:: __pow__(x)

  Computes the power exponent of data extensions.
  
  :param x:
  :type x: number
  :rtype: Image object.


.. function:: sqrt()

  Computes the positive square-root of data extension.
  
  :rtype: Image object.


.. function:: abs()

  Computes the absolute value of data extension.
  
  :rtype: Image object.


.. function:: truncate(ra_min, ra_max, dec_min, dec_max [, mask=True])

  Returns the corresponding sub-image.
  
  :param ra_min: Minimum right ascension in degrees.
  :type ra_min: float
  :param ra_max: Maximum right ascension in degrees.
  :type ra_max: float
  :param dec_min: Minimum declination in degrees.
  :type dec_min: float
  :param dec_max: Maximum declination in degrees.
  :type dec_max: float
  :param mask: if True, pixels outside [ra_min,ra_max] and [dec_min,dec_max] are masked.
  :type mask: boolean
  :rtype: Image
  

.. function:: set_wcs(wcs)

  Sets the world coordinates.
  
  :param wcs: World coordinates.
  :type wcs: WCS
  
.. function:: get_step()

  Returns the image steps [dDec, dRa].
  
  :rtype: float array

.. function:: moments()

  Returns [width_x, width_y] first moments of the 2D gaussian.
  
  :rtype: float array
  
.. function:: gauss_fit(pos_min, pos_max, pos_peak=None, flux=None, width=None, cont=None, rot = 0, peak=False, plot=False)

  Performs polynomial fit on image.
  
  :param pos_min: Minimum right ascension and declination in degrees (ra_min, dec_min).
  :type pos_min: (float,float)
  :param pos_max: Maximum right ascension and declination in degrees (ra_max, dec_max)
  :type pos_max: (float,float)
  :param pos_peak: Initial gaussian center (ra_peak, dec_peak). If None it is estimated.
  :type pos_peak: (float,float)
  :param flux: Initial integrated gaussian flux or gaussian peak value if peak is True. If None, peak value is estimated.
  :type flux: float
  :param width: Initial spreads of the Gaussian blob (ra_width,dec_width). If None, they are estimated.
  :type width: (float,float)
  :param cont: Initial continuum value, if None it is estimated.
  :type cont: float
  :param rot: Initial rotation in degree.
  :type rot: float
  :param peak: If true, flux contains a gaussian peak value. 
  :type peak: boolean
  :param plot: If True, the gaussian is plotted.
  :type plot: boolean
  :rtype: objs.Gauss2D object (`Gauss2D class`_) 


Plotting
--------
 
.. function:: plot(max=None, title=None, noise=False)

  Plots the image.
  
  :param max: If max, the plot is normalized to peak at max value.
  :type max: boolean
  :param title: Figure title (None by default).
  :type title: string
  :param noise: If noise is True, the +/- standard deviation is overplotted. False by default.
  :type noise: boolean



Gauss2D class
=============

This class stores 2D gaussian parameters.


Attributes
----------

+------------+---------------+----------------------------------------------------+
| center     | (float,float) | Gaussian center (ra,dec).                          |
+------------+---------------+----------------------------------------------------+    
| flux       | float         | Gaussian integrated flux.                          |
+------------+---------------+----------------------------------------------------+
| width      | (float,float) | Spreads of the Gaussian blob (ra_width,dec_width). |
+------------+---------------+----------------------------------------------------+    
| cont       | float         | Continuum value.                                   |
+------------+---------------+----------------------------------------------------+    
| rot        | float         | Rotation in degrees.                               |
+------------+---------------+----------------------------------------------------+    
| peak       | float         | Gaussian peak value.                               |
+------------+---------------+----------------------------------------------------+    
| err_center | (float,float) | Estimated error on Gaussian center.                |
+------------+---------------+----------------------------------------------------+        
| err_flux   | float         | Estimated error on Gaussian integrated flux.       |
+------------+---------------+----------------------------------------------------+    
| err_width  | (float,float) | Estimated error on Gaussian width.                 |
+------------+---------------+----------------------------------------------------+    
| err_rot    | float         | Estimated error on rotation.                       |
+------------+---------------+----------------------------------------------------+   
| err_peak   | float         | Estimated error on Gaussian peak value.            | 
+------------+---------------+----------------------------------------------------+


Methods
-------

.. currentmodule:: obj.Gauss2D

.. function:: copy()

  Copies Gauss2D object in a new one and returns it.
  
  :rtype: Gauss2D object
  
.. function:: print_param()

  Prints Gaussian parameters.
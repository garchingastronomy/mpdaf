
Spectrum
********

Spectrum class
==============

This class manages spectrum, optionally including a variance and a bad pixel mask.

.. class:: obj.Spectrum([filename=None, ext = None, getnoise=False, shape=101, wave = None, unit=None, data=None, var=None,fscale=1.0,empty=False])

  :param filename: Possible FITS filename.
  :type filename: string
  :param ext: Number of the data extension or numbers of the data and variance extensions.
  :type ext: integer or (integer,integer)
  :param getnoise: True if the noise Variance spectrum is read (if it exists). Use getnoise=False to create spectrum without variance extension
  :type getnoise: boolean
  :param shape: size of the spectrum. 101 by default.
  :type shape: integer
  :param wave: Wavelength coordinates.
  :type wave: WaveCoord
  :param unit: Possible data unit type. None by default.
  :type unit: string
  :param data: Array containing the pixel values of the spectrum. None by default.
  :type data: float array
  :param var: Array containing the variance. None by default.
  :type var: float array
  :param fscale: Flux scaling factor (1 by default).
  :type fscale: float
  :param empty: If empty is True, the data and variance array are set to None.
  :type empty: boolean
  
Examples::
 
  import numpy as np
  from mpdaf.obj import Spectrum
  from mpdaf.obj import WaveCoord
  
  spe = Spectrum(filename="spectrum.fits",ext=1,getnoise=False) # spectrum from file (extension number is 1)
  
  wave1 = WaveCoord(cdelt=1.25, crval=4000.0, cunit='Angstrom')
  wave2 = WaveCoord(cdelt=1.25, crval=4000.0, cunit='Angstrom', shape=3000)
  MyData = np.ones(4000)
  
  spe = Spectrum(shape=4000, wave=wave1) # spectrum filled with zeros
  spe = Spectrum(wave=wave1, data=MyData) # spectrum filled with MyData
  spe = Spectrum(shape=4000, wave=wave2) # warning: wavelength coordinates and spectrum have not the same dimensions
					 # spe.wave = None
  spe = Spectrum(wave=wave2, data=MyData) # warning: wavelength coordinates and data have not the same dimensions
					    # spe.wave = None
  


Attributes
----------

+---------+-----------------------+----------------------------------------------------+
|filename | string                | Possible FITS filename.                            |
+---------+-----------------------+----------------------------------------------------+
| unit    | string                | Possible data unit type.                           |
+---------+-----------------------+----------------------------------------------------+
| cards   | pyfits.CardList       | Possible FITS header instance.                     |
+---------+-----------------------+----------------------------------------------------+
| data    | masked array          | Pixel values and masked pixels of the spectrum.    |
+---------+-----------------------+----------------------------------------------------+
| shape   | integer               | Size of spectrum.                                  |
+---------+-----------------------+----------------------------------------------------+
| var     | array                 | Array containing the variance.                     |
+---------+-----------------------+----------------------------------------------------+
| fscale  | float                 | Flux scaling factor (1 by default).                |
+---------+-----------------------+----------------------------------------------------+
| wave    | WaveCoord             | Wavelength coordinates.                            |
+---------+-----------------------+----------------------------------------------------+


Indexing
--------

``Spectrum[i]`` returns the corresponding value.

``Spectrum[i1:i2]`` returns the sub-spectrum.

``Spectrum[i] = value`` sets value in Spectrum.data[i]

``Spectrum[i1:i2] = array`` sets the corresponding part of Spectrum.data.


Methods
-------

.. currentmodule:: obj.Spectrum

.. function:: copy()

  Copies Spectrum object in a new one and returns it.
  
  :rtype: Spectrum object
 

.. function:: info()

  Prints information
  
  
.. function:: write(filename)

  Saves the object in a FITS file.
  
  :param filename: the FITS filename
  :type filename: string
 
 
.. function:: __le__ (x)

  Masks data array where greater than a given value.
  
  :param x: minimum value.
  :type x: float
  :rtype: Spectrum object containing a masked array.


.. function:: __lt__ (x)

  Masks data array where greater or equal than a given value.
  
  :param x: minimum value.
  :type x: float
  :rtype: Spectrum object containing a masked array.


.. function:: __ge__ (x)

  Masks data array where less than a given value.
  
  :param x: maximum value.
  :type x: float
  :rtype: Spectrum object containing a masked array.


.. function:: __gt__ (x)

  Masks data array where less or equal than a given value.
  
  :param x: maximum value.
  :type x: float
  :rtype: Spectrum object containing a masked array.


.. function:: resize()

  Resizes the spectrum to have a minimum number of masked values.


.. function:: __add__(x)

  Operator +.
  
  :param x: x is Spectrum : 
			    Dimensions and wavelength coordinates must be the same.
	    x is Cube :
			    The first dimension of cube1 must be equal to the spectrum dimension.
			    Wavelength coordinates must be the same.
  :type x: number or Spectrum or Cube object.  
  :rtype: Spectrum or Cube object.
  
	  spectrum1 + number = spectrum2 (spectrum2[k] = spectrum1[k] + number)
	  
	  spectrum1 + spectrum2 = spectrum3 (spectrum3[k] = spectrum1[k] + spectrum2[k])
	  
	  spectrum + cube1 = cube2 (cube2[k,j,i] = cube1[k,j,i] + spectrum[k])


.. function:: __sub__(x)

  Operator -.
  
  :param x: x is Spectrum : 
			    Dimensions and wavelength coordinates must be the same.
	    x is Cube :
			    The first dimension of cube1 must be equal to the spectrum dimension.
			    Wavelength coordinates must be the same.
  :type x: number or Spectrum or Cube object.
  :rtype: Spectrum or Cube object.
  
	  spectrum1 - number = spectrum2 (spectrum2[k] = spectrum1[k] - number)
	  
	  spectrum1 - spectrum2 = spectrum3 (spectrum3[k] = spectrum1[k] - spectrum2[k])
	  
	  spectrum - cube1 = cube2 (cube2[k,j,i] = spectrum[k] - cube1[k,j,i])


.. function:: __mul__(x)

  Operator \*.
  
  :param x: x is Spectrum : 
			    Dimensions and wavelength coordinates must be the same.
	    x is Cube :
			    The first dimension of cube1 must be equal to the spectrum dimension.
			    Wavelength coordinates must be the same.
  :type x: number or Spectrum or Image or Cube object.
  :rtype: Spectrum or Cube object.
	  
	  spectrum1 \* number = spectrum2 (spectrum2[k] = spectrum1[k] \* number)
	  
	  spectrum1 \* spectrum2 = spectrum3 (spectrum3[k] = spectrum1[k] \* spectrum2[k])
	  
	  spectrum \* cube1 = cube2 (cube2[k,j,i] = spectrum[k] \* cube1[k,j,i])
	  
	  spectrum \* image = cube (cube[k,j,i]=image[j,i] \* spectrum[k]


.. function:: __div__(x)

  Operator /.

  Note : divide functions that have a validity domain returns the masked constant whenever the input is masked or falls outside the validity domain.
  
  :param x: x is Spectrum : 
			    Dimensions and wavelength coordinates must be the same.
	    x is Cube :
			    The first dimension of cube1 must be equal to the spectrum dimension.
			    Wavelength coordinates must be the same.
  :type x: number or Spectrum or Cube object.
  :rtype: Spectrum or Cube object.
  
	  spectrum1 / number = spectrum2 (spectrum2[k] = spectrum1[k] / number)
	  
	  spectrum1 / spectrum2 = spectrum3 (spectrum3[k] = spectrum1[k] / spectrum2[k])
	  
	  spectrum / cube1 = cube2 (cube2[k,j,i] = spectrum[k] / cube1[k,j,i])


.. function:: __pow__(x)

  Computes the power exponent of data extensions.
  
  :param x:
  :type x: number
  :rtype: Spectrum object.


.. function:: sqrt()

  Computes the positive square-root of data extension.
  
  :rtype: Spectrum object.


.. function:: abs()

  Computes the absolute value of data extension.
  
  :rtype: Spectrum object.


.. function:: get_lambda(lmin [,lmax=None])

  Returns the corresponding value or sub-spectrum.
  
  :param lmin: minimum wavelength.
  :type lmin: float
  :param lmax: maximum wavelength.
  :type lmax: float
  :rtype: float or Spectrum


.. function:: get_step()

  Returns the wavelength step.
  
  :rtype: float


.. function:: set_wcs(wave)

  Sets the world coordinates.
  
  :param wave: Wavelength coordinates.
  :type wave: WaveCoord
  
  
.. function:: mask([lmin=None,lmax=None])

  Masks the corresponding sub-spectrum
  
  :param lmin: minimum wavelength.
  :type lmin: float
  :param lmax: maximum wavelength.
  :type lmax: float
  
  
.. function:: unmask()

  Unmasks the spectrum (just invalid data (nan,inf) are masked).


.. function:: interp_mask([spline=False])

  Returns a spectrum built with interpolated values for masked pixels.
  
  :param spline: False: linear interpolation, True: spline interpolation.
  :type spline: boolean
  :rtype: Spectrum
  

.. function:: rebin_factor(factor [, margin='center')

  Shrinks the size of the spectrum by factor.
  
  :param factor: factor
  :type factor: integer
  :param margin: This parameters is used if new size is not an integer multiple of the original size.
  
		'center' : two pixels added, on the left and on the right of the spectrum.
		
		'right': one pixel added on the right of the spectrum.
		
		'left': one pixel added on the left of the spectrum.
		
  :type margin: string in 'center'|'right'|'left'
  :rtype: Spectrum


.. function:: rebin(step [, start=None, shape=None, spline = False])

  Returns a spectrum with data rebinned to different wavelength step size.
  
  :param step: New pixel size in spectral direction.
  :type step: float
  :param start: Spectral position of the first new pixel. It can be set or kept at the edge of the old first one.
  :type start: float
  :param shape: Size of the new spectrum.
  :type shape: integer
  :param spline: Linear/spline interpolation to interpolate masked values.
  :type spline: boolean
  :rtype: Spectrum


.. function:: mean([lmin=None, lmax=None, weight=True, spline=False])

  Computes the mean value on [lmin,lmax].
  
  :param lmin: Minimum wavelength.
  :type lmin: float
  :param lmax: Maximum wavelength.
  :type lmax: float
  :param weight: If weight is True, compute the weighted average with the inverse of variance as weight.
  :type weight: boolean
  :param spline: Linear/spline interpolation to interpolate masked values.
  :type spline: boolean
  :rtype: Returns mean or mean,std.


.. function:: sum([lmin=None, lmax=None, weight=True, spline=False])

  Computes the flux value on [lmin,lmax].

  :param lmin: Minimum wavelength.
  :type lmin: float
  :param lmax: Maximum wavelength.
  :type lmax: float
  :param weight: If weight is True, compute the weighted sum with the inverse of variance as weight.
  :type weight: boolean
  :param spline: Linear/spline interpolation to interpolate masked values.
  :type spline: boolean
  :rtype: Returns flux or flux,std.
 
 
.. function:: poly_fit(deg [, weight=True])

  Performs polynomial fit on spectrum.
  
  :param deg: Polynomial degree.
  :type deg: integer
  :param weight:  If weight is True, the weight is computed as the inverse of variance.
  :type weight: boolean
  :rtype: ndarray, shape. Polynomial coefficients, highest power first.
  
  
.. function:: poly_val(z)

  Returns a spectrum containing polynomial fit values.       
        
  :param z: The polynomial coefficients, in decreasing powers.
  :type z: array
  :rtype: Spectrum
  
.. function:: poly_spec(deg [, weight=True])

  Performs polynomial fit on spectrum and returns a spectrum containing polynomial fit values.
  
  :param deg: Polynomial degree.
  :type deg: integer
  :param weight:  If weight is True, the weight is computed as the inverse of variance.
  :type weight: boolean
  :rtype: Spectrum
  
Examples of polynomial fit on a spectrum::
 
  from mpdaf.obj import Spectrum
  
  spe = Spectrum(filename='spectrum.fits')
  spe.plot()
  # use poly_fit and poly_val
  z = spe.poly_fit(4)
  spe2 = spe.poly_val(z)
  # poly_spec is equivalent to poly_fit and poly_val
  spe2 = spe.poly_spec(4)
  spe2.plot()
   
  
.. function:: abmag_band(lbda, dlbda [, out=1, spline=False])

  Computes AB magnitude corresponding to the wavelength band.
  
  :param lbda: Mean wavelength.
  :type lbda: float
  :param dlbda: Width of the wavelength band.
  :type dlbda: float
  :param out: 1: the magnitude is returned, 2: the magnitude, mean flux and mean wavelength are returned.
  :type out: 1 or 2
  :param spline: Linear/spline interpolation to interpolate masked values.
  :type spline: boolean
  :rtype: magnitude value (out=1) or magnitude, mean flux and mean wavelength (out=2).


.. function:: abmag_filter_name(name [, out=1, spline=False])

  Computes AB magnitude using the filter name.
  
  :param name: 'U', 'B', 'V', 'Rc', 'Ic', 'z', 'R-Johnson','F606W'
  :type name: string 
  :param out: 1: the magnitude is returned, 2: the magnitude, mean flux and mean wavelength are returned.
  :type out: 1 or 2
  :param spline: Linear/spline interpolation to interpolate masked values.
  :type spline: boolean
  :rtype: magnitude value (out=1) or magnitude, mean flux and mean wavelength (out=2).
  

.. function:: abmag_filter(lbda, eff [, out=1, spline=False])

  Computes AB magnitude using array filter.
  
  :param lbda: Wavelength values.
  :type lbda: float array
  :param eff: Efficiency values.
  :type eff: float array
  :param out: 1: the magnitude is returned, 2: the magnitude, mean flux and mean wavelength are returned.
  :type out: 1 or 2
  :param spline: Linear/spline interpolation to interpolate masked values.
  :type spline: boolean
  :rtype: magnitude value (out=1) or magnitude, mean flux and mean wavelength (out=2).

        
Examples::
 
  import numpy as np
  from mpdaf.obj import Spectrum
  
  spe = Spectrum(filename='spectrum.fits')
  lbda,eff = np.loadtxt('filter.txt', unpack=True)
  print spe.abmag_filter(lbda, eff)


.. function:: truncate([lmin=None, lmax=None])

  Truncates a spectrum.
  
  :param lmin: Minimum wavelength.
  :type lmin: float
  :param lmax: Maximum wavelength.
  :type lmax: float
  :rtype: Spectrum
  
  
.. function:: fwhm(l0 [, cont=0, spline=False])

  Returns the fwhm of a peak.
  
  :param l0: Wavelength value corresponding to the peak position.
  :type l0: float 
  :param cont: The continuum [default 0].
  :type cont: integer
  :param spline: Linear/spline interpolation to interpolate masked values.
  :type spline: boolean
  :rtype: float
        

.. function:: gauss_fit(lmin, lmax [, lpeak=None, flux=None, fwhm=None, cont=None, peak=False, spline=False, plot=False])

  Performs polynomial fit on spectrum.
  
  :param lmin: Minimum wavelength value or wavelength range used to compute the gaussian left value.
  :type lmin: float or (float,float)
  :param lmax: Maximum wavelength or wavelength range used to compute the gaussian right value.
  :type lmax: float or (float,float)
  :param lpeak: Input gaussian center, if None it is estimated with the wavelength corresponding to the maximum value in [max(lmin), min(lmax)]
  :type lpeak: float
  :param flux: Integrated gaussian flux or gaussian peak value if peak is True.
  :type flux: float
  :param fwhm: Input gaussian fwhm, if None it is estimated.
  :type fwhm: float
  :param peak: If true, flux contains the gaussian peak value .
  :type peak: boolean
  :param cont: Continuum value, if None it is estimated by the line through points (max(lmin),mean(data[lmin])) and (min(lmax),mean(data[lmax])).
  :type cont: float
  :param spline: Linear/spline interpolation to interpolate masked values.
  :type spline: boolean
  :param plot: If True, the Gaussian is plotted.
  :type plot: boolean
  :returns: objs.Gauss1D object (`Gauss1D class`_) 
    
        
.. function:: add_gaussian(lpeak, flux, fwhm [, cont=0, peak=False])

  Adds a gaussian on spectrum.
  
  :param lpeak: Gaussian center.
  :type lpeak: float
  :param flux: Integrated gaussian flux or gaussian peak value if peak is True.
  :type flux: float
  :param fwhm: Gaussian fwhm.
  :type fwhm: float
  :param cont: Continuum value.
  :type cont: float
  :param peak: If true, flux contains the gaussian peak value .
  :type peak: boolean
  :rtype: Spectrum


Examples of gaussian fit::
 
  from mpdaf.obj import Spectrum
  
  spe = Spectrum(filename='spectrum.fits')
  spe2 = spe.add_gaussian(5000, 1000, 20)
  spe2.plot()
  gauss = spe2.gauss_fit(lmin=(4500,4800), lmax=(5200,6000), lpeak = 5000, plot=True)
  gauss.print_param()
  gauss2 = spe2.gauss_fit(lmin=4800, lmax=5400, plot=True)
  gauss2.print_param()
  
  
.. function:: median_filter([kernel_size=None, pixel=True])

  Performs a median filter on the spectrum.
  
  :param kernel_size: Size of the median filter window.
  :type kernel_size: float
  :param pixel: True: kernel_size is in pixels, False: kernel_size is in spectrum coordinate unit.
  :type pixel: boolean
  :rtype: Spectrum


.. function:: convolve(other)

  Convolves self and other.
  
  :param other: Second spectrum or 1d-array.
  :type other: 1d-array or Spectrum
  :rtype: Spectrum
  

.. function:: fftconvolve(other)

  Convolves self and other using fft.
  
  :param other: Second spectrum or 1d-array.
  :type other: 1d-array or Spectrum
  :rtype: Spectrum


.. function:: correlate(other)

  Cross-correlates self and other.
  
  :param other: Second spectrum or 1d-array.
  :type other: 1d-array or Spectrum
  :rtype: Spectrum
  
  
.. function:: fftconvolve_gauss(fwhm [, nsig=5])

  Convolves the spectrum with a Gaussian using fft.
  
  :param fwhm: Gaussian fwhm.
  :type fwhm: float
  :param nsig: Number of standard deviations.
  :type nsig: integer
  :rtype: Spectrum
  

Plotting
--------
 
 
.. function:: plot([max=None, title=None, noise=False, lmin=None, lmax=None, drawstyle='steps-mid'])

  Plots the spectrum.
        
  :param max: If max is True, the plot is normalized to peak at max value.
  :type max: boolean
  :param title: Figure tiltle (None by default).
  :type title: string
  :param noise: If noise is True, the +/- standard deviation is overplotted.
  :type noise: boolean
  :param lmin: Minimum wavelength.
  :type lmin: float
  :param lmax: Maximum wavelength.
  :type lmax: float
  :param drawstyle: Drawstyle of the plot. 'steps-pre' by default.
  :type drawstyle: [ 'default' | 'steps' | 'steps-pre' | 'steps-mid' | 'steps-post' ]
  

.. function:: log_plot([max=None, title=None, logy=False, noise=False, lmin=None, lmax=None, drawstyle='steps-mid'])

  Plots the spectrum with y logarithmic scale.
        
  :param max: If max is True, the plot is normalized to peak at max value.
  :type max: boolean
  :param title: Figure tiltle (None by default).
  :type title: string
  :param noise: If noise is True, the +/- standard deviation is overplotted.
  :type noise: boolean
  :param lmin: Minimum wavelength.
  :type lmin: float
  :param lmax: Maximum wavelength.
  :type lmax: float
  :param drawstyle: Drawstyle of the plot. 'steps-pre' by default.
  :type drawstyle: [ 'default' | 'steps' | 'steps-pre' | 'steps-mid' | 'steps-post' ]
        

.. function:: ipos([filename='None'])

  Prints cursor position in interactive mode.
  
  To read cursor position, click on the left mouse button.
  
  To remove a cursor position, click on the left mouse button + <shift>
  
  To quit the interactive mode, click on the right mouse button. 
  
  At the end, clicks are saved in self.clicks as dictionary {'xc','yc','x','y'}.
  
  
  :param filename: If filename is not None, the cursor values are saved as a fits table.
  :type filename: string
        
       
.. function:: idist()

  Gets distance and center from 2 cursor positions (interactive mode).
  
  To quit the interactive mode, click on the right mouse button.
  
  
.. function:: imask()

  Over-plots masked values (interactive mode).
  
  
  
.. function:: igauss_fit([nclicks=5])

  Perform an plots a polynomial fit on spectrum.
    
  To select minimum, peak and maximum wavelengths, click on the left mouse button.
  
  To quit the interactive mode, click on the right mouse button.
  
  The parameters of the last gaussian are saved in self.gauss (`Gauss1D class`_) 
  
  :param nclicks: 3 or 5 clicks.
		  Use 3 mouse clicks to get minimim, peak and maximum wavelengths.
		  Use 5 mouse clicks: the two first select a range of minimum wavelengths, the 3th selects the peak wavelength and the two last clicks select a range of maximum wavelengths - see :func:`gauss_fit`.
  :type nclicks: integer
  

Gauss1D class
=============

This class stores 1D gaussian parameters.


Attributes
----------

+-----------+-------+---------------------------------------------+
| lpeak     | float | Gaussian center.                            |
+-----------+-------+---------------------------------------------+
| err_lpeak | float | Estimated error on Gaussian center.         |
+-----------+-------+---------------------------------------------+ 
| flux      | float | Gaussian integrated flux                    |
+-----------+-------+---------------------------------------------+           
| err_flux  | float | Estimated error on Gaussian integrated flux |
+-----------+-------+---------------------------------------------+ 
| peak      | float | Gaussian peak value.                        |
+-----------+-------+---------------------------------------------+           
| err_peak  | float | Estimated error on Gaussian peak value.     |
+-----------+-------+---------------------------------------------+
| fwhm      | float | Gaussian fwhm.                              |
+-----------+-------+---------------------------------------------+
| err_fwhm  | float | Estimated error on Gaussian fwhm.           |
+-----------+-------+---------------------------------------------+  
| cont      | float | Continuum value.                            |
+-----------+-------+---------------------------------------------+

Methods
-------

.. currentmodule:: obj.Gauss1D

.. function:: copy()

  Copies Gauss1D object in a new one and returns it.
  
  :rtype: Gauss1D object
  
.. function:: print_param()

  Prints Gaussian parameters.
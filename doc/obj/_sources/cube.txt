
Cube
****

Cube class
===========

This class manages cubes, optionally including a variance and a bad pixel mask.

.. class:: obj.Cube([filename=None, ext = None, getnoise=False, shape=(101,101,101), wcs = None, wave = None, unit=None, data=None, var=None,fscale=1.0,empty=False])

  :param filename: Possible FITS filename.
  :type filename: string
  :param ext: Number of the corresponding extension in the file.
  :type ext: integer
  :param getnoise: True if the noise Variance cube is read (if it exists). Use getnoise=False to create cube without variance extension.
  :type getnoise: boolean
  :param shape: Lengths of data in Z, Y and X. Python notation is used (nz,ny,nx). (101,101,101) by default.
  :type shape: integer or (integer,integer,integer)
  :param wcs: World coordinates.
  :type wcs: WCS
  :param wave: Wavelength coordinates.
  :type wave: WaveCoord
  :param unit: Possible data unit type. None by default.
  :type unit: string
  :param data: Array containing the pixel values of the cube. None by default.
  :type data: float array
  :param var: Array containing the variance. None by default.
  :type var: float array
  :param fscale: Flux scaling factor (1 by default).
  :type fscale: float
  :param empty: If empty is True, the data and variance array are set to None.
  :type empty: boolean
  
Examples::
 
  from mpdaf.obj import Cube
  from mpdaf.obj import WCS
  from mpdaf.obj import WaveCoord
  cub = Cube(filename="cube.fits",ext=1,getnoise=False) # cube from file (extension number is 1)
  wcs = WCS(crval=0,cdelt=0.2)
  wave = WaveCoord(cdelt=1.25, crval=4000.0, cunit = 'Angstrom')
  cub = Cube(shape=(4000,300,300), wcs=wcs, wave=wave) # cube 4000x300x300 filled with zeros
  cub = Cube(wcs=wcs, wave=wave, data = MyData) # cube filled with MyData


Attributes
----------

+---------+-----------------------+-------------------------------------------------------------+
|filename | string                | Possible FITS filename.                                     |
+---------+-----------------------+-------------------------------------------------------------+
| unit    | string                | Possible data unit type.                                    |
+---------+-----------------------+-------------------------------------------------------------+
| cards   | pyfits.CardList       | Possible FITS header instance.                              |
+---------+-----------------------+-------------------------------------------------------------+
| data    | array or masked array | Array containing the pixel values of the cube.              |
+---------+-----------------------+-------------------------------------------------------------+
| shape   | array of 3 integers   | Lengths of data in Z, Y and X (python notation: (nz,ny,nx)) |
+---------+-----------------------+-------------------------------------------------------------+
| var     | array                 | Array containing the variance.                              |
+---------+-----------------------+-------------------------------------------------------------+
| fscale  | float                 | Flux scaling factor (1 by default).                         |
+---------+-----------------------+-------------------------------------------------------------+
| wcs     | WCS                   | World coordinates.                                          |
+---------+-----------------------+-------------------------------------------------------------+
| wave    | WaveCoord             | Wavelength coordinates.                                     |
+---------+-----------------------+-------------------------------------------------------------+


Indexing
--------

``Cube[k,i,j]`` returns the corresponding value.

``Cube[k1:k2,i1:i2,j1:j2]`` returns the sub-cube.

``Cube[k,:,:]`` returns an Image.

``Cube[:,i,j]`` returns a Spectrum.

``Cube[k,i,j] = value`` sets value in Cube.data[k,i,j]

``Cube[k1:k2,i1:i2,j1:j2] = array`` sets the corresponding part of Cube.data.



Methods
-------

.. currentmodule:: obj.Cube

.. function:: copy()

  Copies Cube object in a new one and returns it.
  
  :rtype: Cube object
 

.. function:: info()

  Prints information
  
 
.. function:: write(filename)

  Saves the object in a FITS file.
  
  :param filename: the FITS filename
  :type filename: string
 
 
.. function:: __le__ (x)

  Masks data array where greater than a given value.
  
  :param x: minimum value.
  :type x: float
  :rtype: Cube object containing a masked array.


.. function:: __lt__ (x)

  Masks data array where greater or equal than a given value.
  
  :param x: minimum value.
  :type x: float
  :rtype: Cube object containing a masked array.


.. function:: __ge__ (x)

  Masks data array where less than a given value.
  
  :param x: maximum value.
  :type x: float
  :rtype: Cube object containing a masked array.


.. function:: __gt__ (x)

  Masks data array where less or equal than a given value.
  
  :param x: maximum value.
  :type x: float
  :rtype: Cube object containing a masked array.


.. function:: resize()

  Resizes the cube to have a minimum number of masked values.


.. function:: __add__(x)

  Operator +.
  
  :param x: x is Spectrum:
			The first dimension of the cube must be equal to the spectrum dimension.
			The wavelength coordinates must be the same.
			
	    x is Image : 
			Dimensions and world coordinates must be the same. 
			
	    x is Cube : 
			The last two dimensions of the cube must be equal to the image dimensions.
			World coordinates in spatial/spectral directions must be the same.
  :type x: number or Spectrum or Image or Cube object.
  :rtype: Cube object.
  
	  cube1 + number = cube2 (cube2[k,j,i] = cube1[k,j,i] + number)

	  cube1 + cube2 = cube3 (cube3[k,j,i] = cube1[k,j,i] + cube2[k,j,i])

	  cube1 + image = cube2 (cube2[k,j,i] = cube1[k,j,i] + image[j,i])

	  cube1 + spectrum = cube2 (cube2[k,j,i] = cube1[k,j,i] + spectrum[k])


.. function:: __sub__(x)

  Operator -.
  
  :param x: x is Spectrum:
			The first dimension of the cube must be equal to the spectrum dimension.
			The wavelength coordinates must be the same.
			
	    x is Image : 
			Dimensions and world coordinates must be the same. 
			
	    x is Cube : 
			The last two dimensions of the cube must be equal to the image dimensions.
			World coordinates in spatial/spectral directions must be the same.
  :type x: number or Spectrum or Image or Cube object.
  :rtype: Cube object.
  
	  cube1 - number = cube2 (cube2[k,j,i] = cube1[k,j,i] - number)

	  cube1 - cube2 = cube3 (cube3[k,j,i] = cube1[k,j,i] - cube2[k,j,i])

	  cube1 - image = cube2 (cube2[k,j,i] = cube1[k,j,i] - image[j,i])

	  cube1 - spectrum = cube2 (cube2[k,j,i] = cube1[k,j,i] - spectrum[k])


.. function:: __mul__(x)

  Operator \*.
  
  :param x: x is Spectrum:
			The first dimension of the cube must be equal to the spectrum dimension.
			The wavelength coordinates must be the same.
			
	    x is Image : 
			Dimensions and world coordinates must be the same. 
			
	    x is Cube : 
			The last two dimensions of the cube must be equal to the image dimensions.
			World coordinates in spatial/spectral directions must be the same.
  :type x: number or Spectrum or Image or Cube object.
  :rtype: Cube object.
  
	  cube1 \* number = cube2 (cube2[k,j,i] = cube1[k,j,i] \* number)

	  cube1 \* cube2 = cube3 (cube3[k,j,i] = cube1[k,j,i] \* cube2[k,j,i])

	  cube1 \* image = cube2 (cube2[k,j,i] = cube1[k,j,i] \* image[j,i])

	  cube1 \* spectrum = cube2 (cube2[k,j,i] = cube1[k,j,i] \* spectrum[k])


.. function:: __div__(x)

  Operator /.
  
  :param x: x is Spectrum:
			The first dimension of the cube must be equal to the spectrum dimension.
			The wavelength coordinates must be the same.
			
	    x is Image : 
			Dimensions and world coordinates must be the same. 
			
	    x is Cube : 
			The last two dimensions of the cube must be equal to the image dimensions.
			World coordinates in spatial/spectral directions must be the same.
  :type x: number or Spectrum or Image or Cube object.
  :rtype: Cube object.
  
	  cube1 / number = cube2 (cube2[k,j,i] = cube1[k,j,i] / number)

	  cube1 / cube2 = cube3 (cube3[k,j,i] = cube1[k,j,i] / cube2[k,j,i])

	  cube1 / image = cube2 (cube2[k,j,i] = cube1[k,j,i] / image[j,i])

	  cube1 / spectrum = cube2 (cube2[k,j,i] = cube1[k,j,i] / spectrum[k])


.. function:: __pow__(x)

  Computes the power exponent of data extensions.
  
  :param x:
  :type x: number
  :rtype: Cube object.


.. function:: sqrt()

  Computes the positive square-root of data extension.
  
  :rtype: Cube object.


.. function:: abs()

  Computes the absolute value of data extension.
  
  :rtype: Cube object.


.. function:: get_lambda(lbda_min [,lbda_max=None])

  Returns the corresponding  image or sub-cube.
  
  :param lbda_min: minimum wavelength.
  :type lbda_min: float
  :param lbda_max: maximum wavelength.
  :type lbda_max: float
  :rtype: Cube or Image
  

.. function:: set_wcs(wcs,wave)

  Sets the world coordinates.
  
  :param wcs: World coordinates.
  :type wcs: WCS
  :param wave: Wavelength coordinates.
  :type wave: WaveCoord



Plotting
--------
 
 




Interface for MUSE pixel tables
*******************************

PixTable class manages MUSE pixel table files.


PixTable class
==============

.. class:: drs.PixTable([filename=None])
  
  :param filename: the FITS filename. None creates an empty object.
  :type filename: string or None

The FITS file is opened with memory mapping. Just the primary header and table dimensions are loaded.
Methods get_xpos, get_ypos, get_lambda, get_data, get_dq ,get_stat and get_origin must be used to get columns data.


Attributes
----------------

+----------------+-----------------+------------------------------------------------------------------------------------------+
| filename       | string          | The FITS file name. None if any.                                                         |
+----------------+-----------------+------------------------------------------------------------------------------------------+
| primary_header | pyfits.CardList | The primary header.                                                                      |
+----------------+-----------------+------------------------------------------------------------------------------------------+
| nrows          | integer         | Number of rows.                                                                          |
+----------------+-----------------+------------------------------------------------------------------------------------------+
| ncols          | integer         | Number of columns.                                                                       |
+----------------+-----------------+------------------------------------------------------------------------------------------+
| xpos           | string          | Name of memory-mapped files used for accessing pixel position on the x-axis.             |
+----------------+-----------------+------------------------------------------------------------------------------------------+
| ypos           | string          | Name of memory-mapped files used for accessing pixel position on the y-axis.             |
+----------------+-----------------+------------------------------------------------------------------------------------------+
| lbda           | string          | Name of memory-mapped files used for accessing wavelength value.                         |
+----------------+-----------------+------------------------------------------------------------------------------------------+
| data           | string          | Name of memory-mapped files used for accessing pixel values.                             |
+----------------+-----------------+------------------------------------------------------------------------------------------+
| dq             | string          | Name of memory-mapped files used for accessing bad pixel status as defined by Euro3D.    |
+----------------+-----------------+------------------------------------------------------------------------------------------+
| stat           | string          | Name of memory-mapped files used for accessing variance.                                 |
+----------------+-----------------+------------------------------------------------------------------------------------------+
| origin         |  string         | Name of memory-mapped files used for accessing an encoded value of IFU and slice number. |
+----------------+-----------------+------------------------------------------------------------------------------------------+


Methods
----------------

.. currentmodule:: drs.PixTable

.. function:: copy()

  Copies CalibFile object in a new one and returns it.
  
  :rtype: CalibFile object
 

.. function:: info()

  Prints information
    
    
.. function:: get_xpos()

  Opens the FITS file with memory mapping, loads the xpos column and returns it.
  
  :rtype: memory-map to an array
  

.. function:: get_ypos()

  Opens the FITS file with memory mapping, loads the ypos column and returns it.
  
  :rtype: memory-map to an array


.. function:: get_lambda()

  Opens the FITS file with memory mapping, loads the lambda column and returns it.
  
  :rtype: memory-map to an array
  
  
.. function:: get_data()

  Opens the FITS file with memory mapping, loads the data column and returns it.
  
  :rtype: memory-map to an array
  

.. function:: get_stat()

  Opens the FITS file with memory mapping, loads the stat column and returns it.
  
  :rtype: memory-map to an array
  

.. function:: get_dq()

  Opens the FITS file with memory mapping, loads the dq column and returns it.
  
  :rtype: memory-map to an array
  
  
.. function:: get_origin()

  Opens the FITS file with memory mapping, loads the origin column and returns it.
  
  :rtype: memory-map to an array
  

.. function:: write(filename)

  Saves the object in a FITS file.
  
  :param filename: the FITS filename
  :type filename: string
  

.. function:: extract(center, size [, lbda=None, shape='C'])

  Extracts a spatial aperture and a wavelength range from a PixTable.
  
  :param center: (x,y) center coordinates in deg.
  :type center: (float,float)
  :param size: size in degree is equal to radius for circular aperture or half side length for square aperture.
  :type size: float
  :param lbda: (min, max) wavelength range in Angstrom. If None the full wavelength range is used.
  :type lbda: (float,float)
  :param shape: 'C' for circular aperture, 'S' for square aperture.
  :type shape: string
  :rtype: PixTable object.
  
Example of a circular extraction::

  from mpdaf.drs import PixTable 
  pixtab = PixTable("pixtable.fits")
  center = (0.0103, -0.0156)
  radius = 2./3600.
  lbda = (7500,8000)
  etab = pixtab.extract(center, radius, lbda, 'C')
  print pixtab.nrows, etab.nrows
  
Example of a square extraction::

  from mpdaf.drs import PixTable 
  pixtab = PixTable("pixtable.fits")
  center = (0.0103, -0.0156)
  d = 2./3600.
  lbda = (7500,8000)
  etab = pixtab.extract(center, d, lbda, 'S')
  print pixtab.nrows, etab.nrows

.. function:: origin2coords(self, origin)

  Converts the origin value and returns (ifu, slice, y, x).

  :param origin: origin value.
  :type origin: integer
  :rtype: tuple of (integer, integer, float, float).
  
.. function:: get_slices()

  Returns slices dictionary {'list': , 'skypos': , 'ifupix': , 'slicepix': , 'xpix': , 'ypix': }
  
  :rtype: dictionary
  
.. function:: get_keywords(key)

  Returns a value of primary-header keyword.
  
  :param key: keyword.
  :type key: string
  :rtype: string
  
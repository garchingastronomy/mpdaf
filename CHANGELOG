v2.0.dev (xx/xx/2016)
---------------------

This is the first public release, as an open source project.

New Features
~~~~~~~~~~~~

* ``Image.resample()``: now applies by default an anti-aliasing filter when
  asked to lower the resolution of an image. This suppresses aliasing artifacts
  and increases the signal to noise ratio by removing noise at high spatial
  frequencies that would otherwise be folded back into the image. This new
  feature can be disabled by setting ``antialias=False``. An optional copy
  argument has also been added which can be used to request that the input
  image be re-sampled in-place, rather than a copy of it. The variance is now
  computed for the re-sampled image, which was not the case before.

* ``Image.regrid()``: **new method** similar to ``Image.resample()``, but more
  flexible in the positioning of the sky in the re-sampled image, and it
  accepts signed pixel increments, such that the directional sense of the axes
  can be specified as well as their resolutions. ``resample`` now uses
  ``regrid`` and was conserved for compatibility reasons.

* ``Image.rebin_mean()`` method has been simplified to make it more
  maintainable. Its calculations of the mean values of the pixels in each bin
  have also been updated to properly account for masked pixels.  Previously it
  computed means by dividing sums of pixel values by the total number of
  pixels. Now it divides them by the number of unmasked pixels. In images with
  masked pixels this will have resulted in smaller pixel values than expected.
  The simplification to this function was to effectively truncate the input
  image to be an integer multiple of the re-binning reduction factor, rather
  than computing partially sampled output pixels for the edge of the re-binned
  image. The result is that some output images will have one pixel less along
  X and/or Y than before.

* ``Image.rotate()``: now works correctly on images whose pixels have different
  angular sizes along the X and Y axes. This includes optionally adjusting the
  pixel sizes of the image to avoid under-sampling the image when rotating
  higher resolution axes onto lower resolution axes.  It also has an optional
  copy argument, which can be used to request that the input image be rotated
  in-place.

* ``Image.align_with_image()``: **new method** to resample the image of the
  object to give it the same orientation, position, resolution and size as
  another image.

* ``Image.estimate_coordinate_offset()``: **new method** which uses
  a full-image auto-correlation to measure the average offsets between the
  world coordinates of common astronomical features in two images. This was
  written primarily to determine coordinate offsets between MUSE images and HST
  reference images.

* ``Image.adjust_coordinates()``: **new method** which uses
  ``Image.estimate_coordinate_offset()`` to determine the world coordinate
  offsets between an image and a reference image, then applies this shift to
  the reference pixel index of the image, so that the two images line up when
  plotted versus Ra and Dec.

* ``WCS.get_axis_increments()``: **new method** which returns the displacements
  on the sky per pixel increment along the Y and X axes. There is also a new
  method ``WCS.set_axis_increments()`` to update the signed displacements on
  the sky.

Breaking changes
~~~~~~~~~~~~~~~~

* Remove unused methods

   - remove the peak detection on a spectrum (peak_detection)
   - remove iterative methods of Spectrum and Image classes
   - remove filter methods on images (minimum_filter, maximum_filter, median_filter)
   - remove Image.sum
   - remove methods to create images (mask_image, composite_image, make_image)
   - remove PixTable.get_slices

* Remove submodules *ZAP* and *GALPAK*.

  - `ZAP <https://github.com/ktsoto/zap>`_ is now publicly available.
  - `GALPAK <http://galpak.irap.omp.eu/downloads.html>`_ is also publicly
    available.

* The ``resize()`` methods of Cube, Image and Spectrum have been renamed
  ``crop()`` to better indicate their purpose. The new methods are also faster
  and use less memory, and return the list of slices that have been used to
  crop the data.

* ``Image.rebin_median()`` has been removed because its effect on the variances
  couldn't be computed, and because it didn't seem scientifically useful. The
  ``Image.median_filter()`` method seems more appropriate for those wishing to
  remove bad pixels.

* Position angles of astronomical features on the sky are conventionally
  specified relative to north, with a rotation from north to east being
  considered a positive angle. However MPDAF's ``get_rot()`` has been returning
  the clockwise angle of north relative to the pixel grid of the image. Since
  East is usually plotted towards the left in astronomical images, this had the
  opposite sign to the convention. For images with non-square pixels, the angle
  also differed in magnitude.  ``WCS.get_rot()`` has been corrected to always
  return the angle between north and the Y axis of the image, in the sense of
  a rotation of north eastwards of Y.  The updated versions of
  ``Image.get_rot()`` and ``Image.rotate()`` resolve this discrepancy, so any
  software that has been using these functions may see changes.

* The return value of the ``get_range()`` methods of Cube, Image and DataArray
  have been changed to a flat array, rather than an array of two coordinate
  tuples that only denoted image corners for non-rotated images.

* ``WCS.get_naxis1()`` and ``WCS.get_naxis2()`` have been removed, because the
  underlying ``WCS.naxis1`` and ``WCS.naxis2`` values can be queried directly.

* ``WCS.resample()`` and ``WCS.rotate()`` methods has been removed, because
  they are no more needed by the equivalent methods in ``Image``.

WCS
~~~

* When an ``WCS`` object is initialized via its cdelt1, cdelt2 and rot
  parameters, the corresponding coordinate transformation matrix is now
  calculated in the way recommended in equation 189 of FITS paper *II*
  (Calabretta, M. R. & Greisen, E. W. 2002 paper II, A&A, 395, 1077-1122).

* The ``WCS`` initializer now accepts a ``cd`` argument, which may be used to
  set the coordinate transformation directly.

* ``WCS.set_step()`` now changes the pixel scaling correctly for all FITS
  files. The previous version, which worked for MUSE FITS files, failed on FITS
  files whose coordinate transform matrix included any shear terms.

* A couple of issues have been resolved in ``WCS.get_step()``. Incorrect values
  were returned for FITS files with pixels that were rectangular on the sky,
  rather than square. This didn't affect typical MUSE FITS files.

* Don't write WCS headers with both ``CDELT1`` and ``CD1_1``.

Data classes (Cube, Image, Spectrum)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

* The variance calculation of ``DataArray.sqrt()`` has been corrected.

* Fix ``Cube.median`` when used with ``axis=None``.

* ``Cube.get_image``: add input param in the FITS header.

* Propagate mask in ``Cube.subcube``.

* Refactor ``Cube.subcube_circle_aperture`` to use ``Cube.subcube()`` and
  ``Cube.mask()``

* Allow to overwrite ``BUNIT`` for data without unit.

* Fix ``EXPTIME`` of combined cubes when cubes overlap (using a median of the
  exposure map give a more realistic estimate).

* In ``Spectrum.sum()`` the weighted mean of the spectral pixels was being
  multiplied by the total number of input pixels instead of the number of
  unmasked pixels. This will have resulted in sums that were too small wherever
  there were masked spectral pixels.

* A couple of problems have been fixed in the code that multiplies an
  image by a spectrum. The original code didn't handle variances
  correctly and crashed due to a non-existent variable.

Pixtable
~~~~~~~~

* Convert pixtable values to double to avoid precision errors.  This avoids
  discrepancies between ``_get_pos_sky`` and ``_get_pos_sky_numexpr`` (numexpr
  seems to use double precision by default) and probably also with other
  methods.

* Fix initial value for ``subtract_slice_median`` correction.  This value was
  set to 1 which seems wrong for an additive correction. To emphasize the fact
  that some combination of slices and quadrants are not valid, and allow to
  filter these values later, this commit changes the init value for the count
  to -1, and the correction to NaN.

Sources
~~~~~~~

* Correct bug in ``Catalog.from_sources``

* Tell which keyword is missing when creating a source.

Muselet
~~~~~~~

* Optimize ``matchlines`` function

* Split the main function in several functions

* Remove Numpy warning

* Use a Numpy array and not a masked array for the weights array

* Use masked median of inv_variance
